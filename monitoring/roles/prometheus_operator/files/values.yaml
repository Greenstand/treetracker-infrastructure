
# From https://www.digitalocean.com/community/tutorials/how-to-set-up-digitalocean-kubernetes-cluster-monitoring-with-helm-and-prometheus-operator
# Define persistent storage for Prometheus (PVC)
prometheusOperator:
  tls:
    enabled: false
  admissionWebhooks:
    enabled: false
  affinity: &nodeAffinity
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: doks.digitalocean.com/node-pool
            operator: In
            values:
            - monitoring-node-pool

prometheus:
  prometheusSpec:
    externalUrl: https://{{ domain }}/prometheus/
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          storageClassName: do-block-storage
          resources:
            requests:
              storage: 40Gi
    affinity: *nodeAffinity

kubeApiServer:
  serviceMonitor:
    metricRelabelings:
    - sourceLabels: [__name__]
      regex: (apiserver_request_duration_seconds_bucket)
      action: drop

# Define persistent storage for Grafana (PVC)
grafana:
  # Set password for Grafana admin user
  adminPassword: {{ adminPassword }}
  deploymentStrategy: { "type": "Recreate" }
  persistence:
    enabled: true
    storageClassName: do-block-storage
    accessModes: ["ReadWriteOnce"]
    size: 5Gi
  grafana.ini:
    server:
      root_url: https://{{ domain }}/grafana
    users:
      viewers_can_edit: true
    dataproxy:
      timeout: 120
    auth.github:
      enabled: true
      allow_sign_up: true
      scopes: user:email,read:org
      auth_url: https://github.com/login/oauth/authorize
      token_url: https://github.com/login/oauth/access_token
      api_url: https://api.github.com/user
      allowed_organizations: Greenstand
      client_id: {{ clientId }}
      client_secret: {{ clientSecret }}
  affinity: *nodeAffinity

# Define persistent storage for Alertmanager (PVC)
alertmanager:
  alertmanagerSpec:
    externalUrl: https://{{ domain }}/alertmanager/
    storage:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          storageClassName: do-block-storage
          resources:
            requests:
              storage: 5Gi
    affinity: *nodeAffinity
  config:
    global:
      resolve_timeout: 5m
      slack_api_url: {{ slack_url }}
    route:
      group_by: ['job']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      routes:
      - match:
          alertname: Watchdog
        receiver: 'null'
      - match:
        receiver: 'slack'
        continue: true
    receivers:
    - name: 'null'
    - name: 'slack'
      slack_configs:
      - channel: {{ slack_channel }}
        send_resolved: false
        {% raw %}
        title: '[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] Monitoring Event Notification'
        text: >-
         {{ range .Alerts }}
            *Alert:* {{ .Annotations.summary }} - `{{ .Labels.severity }}`
            *Description:* {{ .Annotations.description }}
            *Graph:* <{{ .GeneratorURL }}|:chart_with_upwards_trend:> *Runbook:* <{{ .Annotations.runbook }}|:spiral_note_pad:>
            *Details:*
            {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
            {{ end }}
          {{ end }}
        {% endraw %}

# Change default node-exporter port
prometheus-node-exporter:
  service:
    port: 30206
    targetPort: 30206

# Disable Etcd metrics
kubeEtcd:
  enabled: false

# Disable Controller metrics
kubeControllerManager:
  enabled: false

# Disable Scheduler metrics
kubeScheduler:
  enabled: false
