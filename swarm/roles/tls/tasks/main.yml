- name: disable reverse proxy
  docker_swarm_service:
    name: reverse-proxy
    state: absent

- name: remove cert files if existant
  file:
    path: "/opt/certbot/conf"
    state: absent

- name: create folders
  file:
    path: "{{item}}"
    state: directory
    mode: 0755
  with_items:
  - /opt/certbot/nginx
  - /opt/certbot/conf
  - /opt/certbot/lib
  - /opt/certbot/lib/webroot

- name: copy nginx conf
  copy:
    src: nginx-challenge.conf
    dest: /opt/certbot/nginx/nginx.conf
    owner: root
    group: root
    mode: 0644
    force: yes

- name: Get hostname of current node
  shell: "{% raw %} docker node inspect self --format '{{ .Description.Hostname}}' {% endraw %}"
  register: hostname

- name: Start nginx to advertise as healthy
  docker_swarm_service:
    force_update: yes
    name: reverse-proxy
    image: nginx
    replicas: 1
    constraints:
    - "node.hostname == {{hostname.stdout}}"
    publish:
    - published_port: 80
      target_port: 80
    - published_port: 443
      target_port: 443
    mounts:
    - source: /opt/certbot/conf
      target: /etc/letsencrypt
    - source: /opt/certbot/lib
      target: /var/lib/letsencrypt
    - source: /opt/certbot/nginx
      target: /etc/nginx/conf.d

- name: Wait for 30s so that loadbalancer picks up as healthy
  wait_for:
    port: 80
    delay: 30

- name: Add certbot service and run
  tags: retrieve
  docker_swarm_service:
    force_update: yes
    name: certbot-runner
    image: certbot/certbot
    replicas: 1
    constraints:
    - "node.hostname == {{hostname.stdout}}"
    mounts:
    - source: /opt/certbot/conf
      target: /etc/letsencrypt
    - source: /opt/certbot/lib
      target: /var/lib/letsencrypt
    args:
      - "certonly"
      - "--webroot"
      - "--register-unsafely-without-email"
      - "--agree-tos"
      - "--webroot-path"
      - "/var/lib/letsencrypt/webroot/"
      - "--cert-name"
      - "certs"
      - "--force-renewal"
#      - "--staging"
      - "-n"
      - "-d"
      - "{{domain}}"

- name: Wait for pem file to be created
  wait_for:
    path: "/opt/certbot/conf/live/certs/fullchain.pem"

- name: Slurp fullchain.pem
  tags: secret
  slurp:
    src: "/opt/certbot/conf/live/certs/fullchain.pem"
  register: fullchain_content

- name: Create secret out of fullchain.pem
  tags: secret
  docker_secret:
    name: fullchain.pem
    data: "{{fullchain_content['content'] | b64decode}}"
    state: present
    force: yes

- name: Slurp privkey.pem
  tags: secret
  slurp:
    src: "/opt/certbot/conf/live/certs/privkey.pem"
  register: privkey_content

- name: Create secret out of privkey.pem
  tags: secret
  docker_secret:
    name: privkey.pem
    data: "{{privkey_content['content'] | b64decode}}"
    state: present
    force: yes
